// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  idUser       Int     @id @default(autoincrement())
  username     String
  fullname     String?
  password     String
  email        String  @unique
  image        String?
  bio          String?
  profileImage String?

  threads   Threads[]
  replies   Replies[]
  likes     Like[]
  follower  Follower[]
  followinf Following[]

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now()) @updatedAt

  @@map("users")
}

model Threads {
  id              Int     @id @default(autoincrement())
  image           String?
  content         String
  numberOfReplies String?

  replies Replies[]
  likes   Like[]

  createdAt   DateTime @default(now())
  updateAt    DateTime @default(now()) @updatedAt
  user        User?    @relation(fields: [userId_user], references: [idUser])
  userId_user Int?

  @@map("threads")
}

model Replies {
  id      Int    @id @default(autoincrement())
  image   String
  content String

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  User             User?    @relation(fields: [userIdUser], references: [idUser])
  userIdUser       Int?
  Threads          Threads? @relation(fields: [threadsIdThreads], references: [id])
  threadsIdThreads Int?

  @@map("replies")
}

model Like {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  User             User?    @relation(fields: [userIdUser], references: [idUser])
  userIdUser       Int?
  Threads          Threads? @relation(fields: [threadsIdThreads], references: [id])
  threadsIdThreads Int?

  @@map("likes")
}

model Follower {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  User       User? @relation(fields: [userIdUser], references: [idUser])
  userIdUser Int?

  @@map("followers")
}

model Following {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  User       User? @relation(fields: [userIdUser], references: [idUser])
  userIdUser Int?

  @@map("following")
}
